package com.slate{		import com.brightcove.api.APIModules;	import com.brightcove.api.BrightcoveModuleWrapper;	import com.brightcove.api.events.AdEvent;	import com.brightcove.api.events.ContentEvent;	import com.brightcove.api.events.ExperienceEvent;	import com.brightcove.api.events.MediaEvent;	import com.brightcove.api.modules.AdvertisingModule;	import com.brightcove.api.modules.ContentModule;	import com.brightcove.api.modules.ExperienceModule;	import com.brightcove.api.modules.VideoPlayerModule;			import flash.display.Sprite;	import flash.display.Stage;	import flash.events.Event;	import flash.external.ExternalInterface;		public class VideoTracker extends Sprite	{				private var _adBug:Sprite;		private var _adPlayed:Boolean;		private var _advertising:AdvertisingModule;        private var _content:ContentModule;        private var _eventTracker:Object;        private var _experience:ExperienceModule;        private var _experienceId:String;		private var _omni:OmnitureDelegate;		private var _player:BrightcoveModuleWrapper;		private var _stage:Stage;		private var _videoBegin:Boolean = false;		private var _video:VideoPlayerModule;		private var _videoID:int;		private var _videoTitle:String;		private var _xml:XML;		public function VideoTracker(p:BrightcoveModuleWrapper)		{			trace("[VideoTracker instantiated]");			_player = p;						            //Brightcove modules			_advertising = _player.getModule(APIModules.ADVERTISING) as AdvertisingModule;			_content = _player.getModule(APIModules.CONTENT) as ContentModule;			_experience = _player.getModule(APIModules.EXPERIENCE) as ExperienceModule;			_video = _player.getModule(APIModules.VIDEO_PLAYER) as VideoPlayerModule;						//reference to the brightcove player's stage			_stage = _experience.getStage();            //_eventTracker is used to make sure milestones are only fired once			//resetEventTracker();						_videoID = _video.getCurrentVideo().id;			_videoTitle = _video.getCurrentVideo().displayName;						_omni = new OmnitureDelegate();			//other vars set in checkProgress()			_omni.s.eVar14 = "slate.com";			_advertising.addEventListener(AdEvent.AD_START, handleEvents);			_advertising.addEventListener(AdEvent.AD_COMPLETE, handleEvents);			_advertising.addEventListener(AdEvent.AD_RECEIVED, handleEvents);			_content.addEventListener(ContentEvent.MEDIA_LOAD, handleEvents);			_experience.addEventListener(ExperienceEvent.ENTER_FULLSCREEN, handleEvents);			_experience.addEventListener(ExperienceEvent.EXIT_FULLSCREEN, handleEvents);			_video.addEventListener(MediaEvent.BEGIN, handleEvents);			_video.addEventListener(MediaEvent.COMPLETE, handleEvents);			_video.addEventListener(MediaEvent.PROGRESS, handleEvents);			_stage.addEventListener(Event.FULLSCREEN, handleEvents);					}		private function addOverlays():void		{			var adNode = _advertising.getAdPolicy().adServerURL.substr(TSGAnalyticsPlugin.DART_PATH.length);			trace("[VideoTracker addOverlays] adNode is " + adNode);			trace("[VideoTracker addOverlays] Stage size is " + _stage.width +"x"+_stage.height);			trace("[VideoTracker addOverlays] Display size is " + _video.getDisplayWidth() +"x"+_video.getDisplayHeight());			switch(adNode)			{				case "slate.v.video/test":				case "slate.v.video.vast2":				case "slate.v.video/business/thebullet":					_adBug = new FedExBug();					_adBug.x = 5;					_adBug.y = _video.getDisplayHeight() - _adBug.height - 5;					_stage.addChild(_adBug);					_adBug.mouseEnabled = false;					break;				case "roots.video/familyreunion":					_adBug = new MarriottBug();					_adBug.x = 5;					_adBug.y = _video.getDisplayHeight() - _adBug.height - 5;					_stage.addChild(_adBug);					break;				case "roots.video/bucketlist":					_adBug = new AmericanAirlinesBug();					_adBug.x = 5;					_adBug.y = _video.getDisplayHeight() - _adBug.height - 5;					_stage.addChild(_adBug);					break				case "roots.video/mentorship":					_adBug = new StarbucksBug();					_adBug.x = 5;					_adBug.y = _video.getDisplayHeight() - _adBug.height - 5;					_stage.addChild(_adBug);					break;				default:					break;			}		}		private function adjustOverlay(layout:String=""):void		{			switch(layout)			{				case "fullscreen":					_adBug.y = _stage.stageHeight - _adBug.height - 5;					break;				default:					_adBug.y = _video.getDisplayHeight() - _adBug.height - 5;					break;			}		}		private function handleEvents(evt:*):void		{			//trace(["VideoTracker handleEvents"]);			//trace(evt);			switch(evt.type)			{				case "adStart":					//trace("[VideoTracker adStart]");                    _omni.s.events = "event16";                    _omni.s.trackLink(loaderInfo.url, "o", "Video Ad Start");                    _omni.s.events = "";					ExternalInterface.call("slateAdHandler", _xml.toString(), _experienceId);					break;				case "adReceived":					_xml = new XML(evt.ad);					_experienceId = _experience.getExperienceID().toString();					break;				case "adComplete":					_adPlayed = true;					ExternalInterface.call("closeAd", _experienceId);					break;				case "enterFullScreen":					adjustOverlay("fullscreen");					break;				case "exitFullScreen":					adjustOverlay();					break;				case "mediaLoad":					ExternalInterface.call("console.info", "MEDIA LOAD");					break;				// don't use media begin and media complete, since these aren't fired when a video is replayed. 				// Best thing according to BC is to determine with progress.				case "mediaBegin":				case "mediaComplete":					break;				case "mediaProgress":					checkProgress();					break;			}		}        private function checkProgress():void 		{			var raw = Number(_video.getVideoPosition()) / Number(_video.getVideoDuration()) * 100			var val = parseInt(raw);			//var msg = _video.getVideoPosition() + " / " + _video.getVideoDuration() + " = " + val;			//ExternalInterface.call("console.info", raw +" = "+ val);						if (raw == 0 && !_videoBegin){				_videoTitle = _video.getCurrentVideo().displayName;				_omni.s.eVar13 = _videoTitle + " (" + _video.getVideoDuration(true) + ") " + _videoID;				_videoBegin = true;				addOverlays();				resetEventTracker();				var name:String = (_adPlayed)? "Video Start With Ad" : "Video Start"				_omni.s.events = "event9";				_omni.s.trackLink(loaderInfo.url, "o", name);				_omni.s.events = "";				ExternalInterface.call("console.info", _videoTitle);			}			            switch(val){                case 25:                    if (!_eventTracker.twentyFive){                        _omni.s.events = "event10";                        _omni.s.trackLink(loaderInfo.url, "o", "Video 25 Percent");                        _omni.s.events = "";                        _eventTracker.twentyFive = true;						ExternalInterface.call("console.info", 25);                    }                    break;                case 50:                    if (!_eventTracker.fifty){                        _omni.s.events = "event11";                        _omni.s.trackLink(loaderInfo.url, "o", "Video 50 Percent");                        _omni.s.events = "";                        _eventTracker.fifty = true;						ExternalInterface.call("console.info", 50);                    }                    break;                case 75:                    if (!_eventTracker.seventyFive){                        _omni.s.events = "event12";                        _omni.s.trackLink(loaderInfo.url, "o", "Video 75 Percent");                        _omni.s.events = "";                        _eventTracker.seventyFive = true;						ExternalInterface.call("console.info", 75);                    }                    break;                case 99:                    if (!_eventTracker.complete){                        _omni.s.events = "event13";                        _omni.s.trackLink(loaderInfo.url, "o", "Video Complete");                        _omni.s.events = "";                        _eventTracker.complete = true;						_adPlayed = false;						_videoBegin = false;						ExternalInterface.call("console.info", 99);						ExternalInterface.call("console.info", "_videoBegin = " + _videoBegin);                    }                    break;				            }        }		private function resetEventTracker():void		{			ExternalInterface.call("console.info", "Resetting Event Tracker");			_eventTracker = {twentyFive:false, fifty:false, seventyFive:false, complete:false};					}	}}