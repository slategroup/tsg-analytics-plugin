package com.slate{	/*				TODO: Move to config.xml file to facilitate reuse.	*/		import com.omniture.AppMeasurement;	import flash.display.Sprite;	public class OmnitureDelegate extends Sprite	{		//config		//private const ACCOUNT:String = "wpnislatevpp";//wpnislatevprod				private var _s:AppMeasurement;		public function OmnitureDelegate()		{			trace("[OmnitureDelegate instantiated]");			_s = new AppMeasurement();						/* Specify the Report Suite ID(s) to track here */			_s.account = getAccountInfo().account//ACCOUNT;						/* You any other code config should be added thru the instance */			_s.charSet = "UTF-8";			_s.currencyCode = "USD";						/* Turn on and configure ClickMap tracking here */			_s.trackClickMap = false;			_s.movieID = "";						/* Turn on and configure debugging here */			_s.debugTracking = false;			_s.trackLocal = false;					/* WARNING: Changing any of the below variables will cause drastic changes			to how your visitor data is collected.  Changes should only be made			when instructed to do so by your account manager.*/			_s.visitorNamespace = "wpni";			_s.trackingServer = getAccountInfo().trackingServer;//"wpni.112.2o7.net";		}				private function getAccountInfo():Object		{			var hostBits = TSGAnalyticsPlugin.host.split('.');			var data = {};						switch(hostBits[hostBits.length - 2])			{				case "slate":					data.trackingServer = "metrics.slate.com";					data.account = (hostBits[hostBits.length - 3] == "www")? "wpnislateprod": "wpnislatepp";					break;				case "slatev":					data.trackingServer = "metrics.washingtonpost.com";					data.account = (hostBits[hostBits.length - 3] == "www")? "wpnislatevprod": "wpnislatevpp";					break;				case "theroot":					data.trackingServer = "metrics.washingtonpost.com";					data.account = (hostBits[hostBits.length - 3] == "www")? "wpnitherootprod2": "wpnitherootpp";					break;				default:					data.trackingServer = "metrics.slate.com";					data.account = "wpnislatepp";			}						return data;					}				public function get s():AppMeasurement		{			return _s;		}	}}